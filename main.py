import keyboards, funkfunctions, user, texts
import random
from aiogram.types import Message
from aiogram.filters import Text, Command

#–û–±—Ä–∞–±–æ—Ç—á–∫–∏ –∫–æ–º–∞–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@user.user.dp.message(funkfunctions.funk.IsAdmin(user.user.admin_list) and Text(text=['admin']))
async def send_message_admin(message: Message):
    await message.answer('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                         reply_markup=keyboards.keyboard.keyboard_admin)

#–û–±—Ä–∞–±–æ—Ç—á–∫–∏ –∫–æ–º–∞–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@user.user.dp.message(funkfunctions.funk.IsAdmin(user.user.admin_list) and Text(text=['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']))
async def send_message_admin(message: Message):
    await message.answer(f'–ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ \n\n{funkfunctions.funk.user_list()}\n\n'
                         f'–ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {funkfunctions.funk.user_count()}')



#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç
@user.user.dp.message(Command(commands=['start']))
async def send_start_message(message : Message):
    await message.answer(texts.text.start_message,
                         reply_markup=keyboards.keyboard.keyboard_start)
    funkfunctions.funk.start_button(message)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ
@user.user.dp.message(Text(text=['info']))
async def send_info_message(message: Message):
    await message.answer(texts.text.info_bot_message,
                         reply_markup=keyboards.keyboard.keyboard_start)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—Ç—å –≤—Ä–µ–º—è
@user.user.dp.message(Text(text = ['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚è≤']))
async def send_timer_message(message: Message):

    if user.user.user_info[message.from_user.id]['timer'] == False :
        await message.answer(f'–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –ø–µ—Ä–µ—ã–≤ –º–µ–∂–¥—É —Å–∏–≥–∞—Ä–µ—Ç–∞–º–∏',
                         reply_markup=keyboards.keyboard.keyboard_smoke_time)
    else:

        await message.answer(f'–î–æ –∫–æ–Ω—Ü–∞ —Ç–∞–π–º–µ—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å {funkfunctions.funk.time_left(message)}\n\n'
                             f'–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—à–∏–π –∏ —É—Å—Ç–∞–Ω–æ–∏—Ç—å –Ω–æ–≤—ã–π ?\n\n',
                             reply_markup=keyboards.keyboard.keyboard_yes_no)

@user.user.dp.message(Text(text=['1 —á–∞—Å','2 —á–∞—Å–∞','3 —á–∞—Å–∞','4 —á–∞—Å–∞']))
async def add_timer_message(message: Message):
    await message.answer(f'–Ø —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–∞–π–º–µ—Ä –Ω–∞ {message.text}',
                         reply_markup=keyboards.keyboard.keyboard_timer_on)
    funkfunctions.funk.add_new_timer_user_apdate(message)
    await funkfunctions.funk.restart_timer(message)


@user.user.dp.message(Text(text=['–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä']))
async def reset_timer_message(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è',
                         reply_markup=keyboards.keyboard.keyboard_smoke_time)
    funkfunctions.funk.timer_reset(message)

@user.user.dp.message(Text(text=['–ü–æ–∫—É—Ä–∏–ª üö¨']))
async def send_smoke_message(message : Message):

    if user.user.user_info[message.from_user.id]['timer'] == False:
        await message.answer(random.choice(texts.text.answer_positive),
                         reply_markup=keyboards.keyboard.keyboard_timer_on)

        funkfunctions.funk.smoke_posutive(message)
        await funkfunctions.funk.restart_timer(message)
    else:
        await message.answer(random.choice(texts.text.answer_negative),
                             reply_markup=keyboards.keyboard.keyboard_timer_on)
        funkfunctions.funk.smoke_negative(message)
        # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
        await funkfunctions.funk.restart_timer(message)

@user.user.dp.message(Text(text='–ù–µ—Ç'))
async def back_to_back(message :Message):
    await message.answer('–û–∫–µ–π, —Ç–æ–≥–¥–∞ –∂–¥–µ–º', reply_markup=keyboards.keyboard.keyboard_timer_on)

@user.user.dp.message(Text(text='Stat'))
async def statistic_info(message :Message):
    await message.answer(funkfunctions.funk.statistic_answer(message))

if __name__ =='__main__':
    user.user.dp.run_polling(user.user.bot)
