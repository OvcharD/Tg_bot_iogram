import asyncio
import datetime
import time
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove)
from aiogram.filters import Text, Command

TOKEN: str = '6059035440:AAGBNi_7ly8_jN5lNT_uitfv2tz6fbMBNxo'

bot: Bot = Bot(token = TOKEN)
dp: Dispatcher = Dispatcher()

user_info:dict = {'user_id' : None,
                  'timer': False,
                  'cigarettes': 0,
                  'time_for_minutes': 0,
                  'start_time' : None,
                  'finish_time' : None,
                  'new_timer_on' : False}
#–ö–Ω–æ–ø–∫–∏
button_time_edit: KeyboardButton = KeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚è≤')
button_smoke: KeyboardButton = KeyboardButton(text='–ü–æ–∫—É—Ä–∏–ª üö¨')
button_info: KeyboardButton = KeyboardButton(text= 'info')
button_time_1: KeyboardButton = KeyboardButton(text='1 —á–∞—Å')
button_time_2: KeyboardButton = KeyboardButton(text='2 —á–∞—Å–∞')
button_time_3: KeyboardButton = KeyboardButton(text='3 —á–∞—Å–∞')
button_time_4: KeyboardButton = KeyboardButton(text='4 —á–∞—Å–∞')
button_yes: KeyboardButton = KeyboardButton(text = '–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä')
button_no: KeyboardButton = KeyboardButton(text='–ù–µ—Ç')


#—Å–æ–∑–¥–∞–µ–º –æ–±—å–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–æ –∫–Ω–æ–ø–∫–µ —Å—Ç–∞—Ä—Ç)
keyboard_start: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[button_info, button_time_edit]],
                                                           resize_keyboard=True)
#—Å–æ–∑–¥–∞–µ–º –æ–±—å–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–£—Å—Ç–∞–Ω–æ–≤–∏ —Ç–∞–π–º–µ—Ä)
keyboard_smoke_time: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[button_time_1, button_time_2,
                                                                             button_time_3, button_time_4]],
                                                                resize_keyboard=True)
#—Å–æ–∑–¥–∞–µ–º –æ–±—å–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏)
keyboard_timer_on: ReplyKeyboardMarkup = ReplyKeyboardMarkup(keyboard=[[button_time_edit, button_smoke]],
                                                       resize_keyboard=True)
#—Å–æ–∑–¥–∞–µ–º –æ–±—å–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–∞–π–º–µ—Ä–∞)
keyboard_yes_no: ReplyKeyboardMarkup =ReplyKeyboardMarkup(keyboard=[[button_yes, button_no]],
                                                          resize_keyboard=True)
#—Ñ—É–Ω—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏—è
def translate_of_time(time:str) -> int:
    if time == '1 —á–∞—Å':
        return 10
    elif time == '2 —á–∞—Å–∞':
        return 10
    elif time == '3 —á–∞—Å–∞':
        return 10
    elif time == '4 —á–∞—Å–∞':
        return 10

#–§—É–Ω—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ -–¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø–æ–∫—É—Ä–∏–ª –ø–æ—Å–ª–µ —Ç–∞–π–º–µ—Ä–∞ –∏–ª–∏ –≤–æ –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞
async def restart_timer(message: Message):
    user_info[message.from_user.id]['timer'] = True
    new_time = user_info[message.from_user.id]['time_for_minutes']
    await asyncio.sleep(new_time)
    await bot.send_message(message.from_user.id,
                        f'–¢–∞–π–º–µ—Ä –Ω–∞ {user_info[message.from_user.id]["time_for_minutes"]} —Å–µ–∫—É–Ω–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
    user_info[message.from_user.id]['timer'] = False

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç
@dp.message(Command(commands=['start']))
async def send_start_message(message : Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç üôå, —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤ –±–æ—Ä—å–±–µ —Å –∫—É—Ä–µ–Ω–∏–µ–º! \n'
                         f'–£–∫–∞–∂–∏ –≤–µ—Ä–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –º–µ–∂–¥—É —Å–∏–≥–∞—Ä–µ—Ç–∞–º–∏, —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∫–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä –ø–æ–¥–æ–π—Ç–µ—Ç –∫ –∫–æ–Ω—Ü—É\n',
                         reply_markup=keyboard_start)
    if message.from_user.id not in user_info:
        user_info[message.from_user.id] = {
                  'timer': False,
                  'cigarettes': 0,
                  'time_for_minutes': 0,
                  'start_time' : None,
                  'finish_time' : None}

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ
@dp.message(Text(text=['info']))
async def send_info_message(message: Message):
    await message.answer(f'–°–º–æ—Ç—Ä–∏, –≤—Å–µ –ø—Ä–æ—Å—Ç–æü•±\n\n'
                         f'–í—ã–±–µ—Ä–∞–µ—à—å –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ –∏ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –Ω–µ –∫—É—Ä–∏—Ç—å‚è≤\n\n'
                         f'–ï—Å–ª–∏ –ø–æ–∫—É—Ä–∏–ª - –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏ –º–Ω–µ –∏ —è —Å–±—Ä–æ—à—É —Ç–∞–π–º–µ—Ä –∏ –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æü§ì\n\n'
                         f'–ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∫–æ–Ω—á–∏—Ç—Å—è —è —Å–æ–æ–±—â—É –æ —Ç–æ–º —á—Ç–æ –º–æ–∂–Ω–æ —É—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–∫—É—Äüö¨\n\n'
                         f'–ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ‚öô\n\n'
                         f'–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–ºüí™',
                         reply_markup=keyboard_start)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—Ç—å –≤—Ä–µ–º—è
@dp.message(Text(text = ['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚è≤']))
async def send_timer_message(message: Message):
    print(user_info[message.from_user.id])
    if user_info[message.from_user.id]['timer'] == False :
        await message.answer(f'–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –ø–µ—Ä–µ—ã–≤ –º–µ–∂–¥—É —Å–∏–≥–∞—Ä–µ—Ç–∞–º–∏',
                         reply_markup=keyboard_smoke_time)
    else:

        await message.answer(f'–¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {user_info[message.from_user.id]["time_for_minutes"]}\n\n'
                             f'–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—à–∏–π –∏ —É—Å—Ç–∞–Ω–æ–∏—Ç—å –Ω–æ–≤—ã–π ?\n\n',
                             reply_markup=keyboard_yes_no)

@dp.message(Text(text=['1 —á–∞—Å','2 —á–∞—Å–∞','3 —á–∞—Å–∞','4 —á–∞—Å–∞']))
async def add_timer_message(message: Message):

    await message.answer(f'–Ø —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–∞–π–º–µ—Ä',
                         reply_markup=keyboard_timer_on)
    user_info[message.from_user.id]['timer'] = True  #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ —Ç–∞–π–º–µ—Ä –≤–∫–ª—é—á–µ–Ω
    user_info[message.from_user.id]['time_for_minutes'] = translate_of_time(message.text)
    print(user_info[message.from_user.id]['time_for_minutes'])
    print(user_info[message.from_user.id])
    #–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
    while user_info[message.from_user.id]['timer'] == True :
        await asyncio.sleep(user_info[message.from_user.id]['time_for_minutes'])
        await bot.send_message(message.from_user.id, f'–¢–∞–π–º–µ—Ä –Ω–∞ {user_info[message.from_user.id]["time_for_minutes"]} —Å–µ–∫—É–Ω–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
        user_info[message.from_user.id]['timer'] = False
        print(user_info[message.from_user.id])

@dp.message(Text(text=['–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä']))
async def reset_timer_message(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è',
                         reply_markup=keyboard_smoke_time)
    user_info[message.from_user.id]['timer'] = False

@dp.message(Text(text=['–ü–æ–∫—É—Ä–∏–ª üö¨']))
async def send_smoke_message(message : Message):

    if user_info[message.from_user.id]['timer'] == False:
        await message.answer(f'–ö—Ä—É—Ç–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è\n\n'
                         f'–Ø –∑–∞–≤–µ–ª –µ–≥–æ –æ–ø—è—Ç—å –Ω–∞ —Ç–∞–∫–æ–µ –∂–µ –≤—Ä–µ–º—è',
                         reply_markup=keyboard_timer_on)
        user_info[message.from_user.id]['cigarettes'] += 1
        await restart_timer(message)
        print(user_info[message.from_user.id])
    else:
        await message.answer(f'–ù–µ –ø–µ—Ä–∂–∏–≤–∞–π\n\n'
                             f'–Ø –∑–∞–≤–µ–ª –µ–≥–æ –æ–ø—è—Ç—å –Ω–∞ —Ç–∞–∫–æ–µ –∂–µ –≤—Ä–µ–º—è',
                             reply_markup=keyboard_timer_on)
        user_info[message.from_user.id]['cigarettes'] += 1
        user_info[message.from_user.id]['timer'] = False
        print(user_info[message.from_user.id])
        await restart_timer(message)

if __name__ =='__main__':
    dp.run_polling(bot)